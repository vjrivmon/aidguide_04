---
description: 
globs: 
alwaysApply: false
---
# Regla: Est√°ndares para Scripts de Automatizaci√≥n

Esta regla establece los est√°ndares y mejores pr√°cticas para la creaci√≥n y mantenimiento de scripts de automatizaci√≥n en el proyecto AidGuide 04.

## Descripci√≥n
Define la estructura, convenciones y mejores pr√°cticas para crear scripts de automatizaci√≥n que faciliten el desarrollo y despliegue del proyecto.

## Estructura Base de Scripts

### 1. Encabezado Est√°ndar
```powershell
# Script de automatizaci√≥n para [prop√≥sito]
# Autor: [nombre del autor/equipo]
# Fecha: [fecha de creaci√≥n/√∫ltima modificaci√≥n]
# Descripci√≥n: [descripci√≥n detallada del prop√≥sito del script]
```

### 2. Variables de Configuraci√≥n
```powershell
# PowerShell
# Configuraci√≥n de colores y estilos
$Colors = @{
    Success = 'Green'
    Warning = 'Yellow'
    Error = 'Red'
    Info = 'Cyan'
}

# Bash
# Configuraci√≥n de colores y estilos
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RED='\033[0;31m'
NC='\033[0m' # No Color
```

## Convenciones de Nombrado

### 1. Nombres de Archivos
- Scripts PowerShell: `start-[componente].ps1`
- Scripts Bash: `start-[componente].sh`
- Scripts de configuraci√≥n: `setup-[componente].[ps1/sh]`
- Scripts de utilidades: `utils-[prop√≥sito].[ps1/sh]`

### 2. Variables y Funciones
- Variables: PascalCase para PowerShell, UPPER_CASE para variables de entorno
- Funciones: Verb-Noun para PowerShell, snake_case para Bash
- Paths: usar variables para rutas comunes

## Estructura de Directorios
```
scripts/
‚îú‚îÄ‚îÄ windows/              # Scripts espec√≠ficos para Windows
‚îÇ   ‚îú‚îÄ‚îÄ setup/           # Scripts de configuraci√≥n
‚îÇ   ‚îú‚îÄ‚îÄ start/           # Scripts de inicio
‚îÇ   ‚îî‚îÄ‚îÄ utils/           # Utilidades
‚îú‚îÄ‚îÄ linux/               # Scripts espec√≠ficos para Linux
‚îÇ   ‚îú‚îÄ‚îÄ setup/
‚îÇ   ‚îú‚îÄ‚îÄ start/
‚îÇ   ‚îî‚îÄ‚îÄ utils/
‚îî‚îÄ‚îÄ common/              # Scripts multiplataforma
    ‚îî‚îÄ‚îÄ config/          # Configuraciones compartidas
```

## Plantillas de Scripts

### 1. Script de Inicio (PowerShell)
```powershell
#!/usr/bin/env pwsh

# Script de automatizaci√≥n para [prop√≥sito]
# Autor: DevOps Team
# Fecha: [fecha]
# Descripci√≥n: [descripci√≥n]

# Configuraci√≥n de colores
$Colors = @{
    Success = 'Green'
    Warning = 'Yellow'
    Error = 'Red'
    Info = 'Cyan'
}

# Funci√≥n para mostrar mensajes
function Write-StatusMessage {
    param(
        [string]$Message,
        [string]$Type = 'Info'
    )
    Write-Host "[$Type] $Message" -ForegroundColor $Colors[$Type]
}

# Manejo de errores
$ErrorActionPreference = 'Stop'
try {
    Write-StatusMessage "üöÄ Iniciando proceso..." -Type 'Info'
    
    # L√≥gica principal aqu√≠
    
    Write-StatusMessage "‚úÖ Proceso completado" -Type 'Success'
} catch {
    Write-StatusMessage "‚ùå Error: $_" -Type 'Error'
    exit 1
}
```

### 2. Script de Inicio (Bash)
```bash
#!/bin/bash

# Script de automatizaci√≥n para [prop√≥sito]
# Autor: DevOps Team
# Fecha: [fecha]
# Descripci√≥n: [descripci√≥n]

# Configuraci√≥n
set -e  # Salir en caso de error

# Colores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RED='\033[0;31m'
NC='\033[0m'

# Funci√≥n para mostrar mensajes
log_message() {
    local type=$1
    local message=$2
    case $type in
        "info")    echo -e "${CYAN}[INFO] $message${NC}" ;;
        "success") echo -e "${GREEN}[SUCCESS] $message${NC}" ;;
        "warning") echo -e "${YELLOW}[WARNING] $message${NC}" ;;
        "error")   echo -e "${RED}[ERROR] $message${NC}" ;;
    esac
}

# Manejo de errores
trap 'log_message error "Error en l√≠nea $LINENO"' ERR

# Funci√≥n principal
main() {
    log_message info "üöÄ Iniciando proceso..."
    
    # L√≥gica principal aqu√≠
    
    log_message success "‚úÖ Proceso completado"
}

main "$@"
```

## Mejores Pr√°cticas

### 1. Manejo de Errores
- Implementar try-catch en PowerShell
- Usar set -e en Bash
- Proporcionar mensajes de error descriptivos
- Implementar limpieza en caso de error

### 2. Logging
- Usar funciones de logging consistentes
- Incluir timestamps en logs
- Diferenciar tipos de mensajes (info, warning, error)
- Mantener logs legibles

### 3. Parametrizaci√≥n
- Usar argumentos de l√≠nea de comandos para configuraci√≥n
- Implementar valores por defecto
- Validar par√°metros de entrada
- Documentar todos los par√°metros

### 4. Verificaciones
- Comprobar requisitos previos
- Verificar permisos necesarios
- Validar existencia de archivos/directorios
- Comprobar conectividad si es necesario

### 5. Documentaci√≥n
- Incluir descripci√≥n del prop√≥sito
- Documentar par√°metros y valores de retorno
- Proporcionar ejemplos de uso
- Mantener un registro de cambios

## Validaci√≥n

### 1. Checklist de Calidad
- [ ] El script tiene encabezado completo
- [ ] Implementa manejo de errores
- [ ] Incluye logging apropiado
- [ ] Valida entradas y prerrequisitos
- [ ] Tiene documentaci√≥n completa
- [ ] Sigue las convenciones de nombrado
- [ ] Incluye mensajes de usuario claros
- [ ] Maneja la limpieza de recursos

### 2. Testing
- Probar en entorno limpio
- Verificar manejo de errores
- Comprobar casos l√≠mite
- Validar en diferentes sistemas operativos

## Referencias
- [PowerShell Style Guide](mdc:https:/poshcode.gitbook.io/powershell-practice-and-style)
- [Bash Scripting Guide](mdc:https:/google.github.io/styleguide/shellguide.html)
- [ROS2 Launch File Guide](mdc:https:/docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html) 